07 January 2009;  time sent: 1355 GMT

Dear Professor Bagheri,

I have now heard from the Subject Editor regarding your paper which was submitted to the International Journal of Computer Mathematics. Your manuscript entitled "Drawing Complete Binary Trees inside Rectilinear Polygons" has been reviewed. The reviewers' comments, and those of the Subject Editor, are included at the bottom of this letter.

You will see that, although the referees find some merit in the paper, it is required that substantial revisions be done before we can consider it further.  Nevertheless, I do hope that you will be able to undertake the additional work on the paper and look forward to receiving a revised manuscript in due course.

When you revise your manuscript please highlight the changes you make in the manuscript by using the track changes mode in MS Word or by using bold or coloured text.

To submit the revision, log into http://mc.manuscriptcentral.com/gcom  and enter your Author Centre, where you will find your manuscript title listed under "Manuscripts with Decisions." Under "Actions," click on "Create a Revision." Your manuscript number has been appended to denote a revision. Please enter your responses to the comments made by the reviewer(s) in the space provided. You can use this space to document any changes you made to the original manuscript. Please be as specific as possible in your response to the reviewer(s).

IMPORTANT:  Your original files are available to you when you upload your revised manuscript.  Please delete any redundant files before completing the submission.

Because we are trying to facilitate timely publication of manuscripts submitted to the International Journal of Computer Mathematics, your revised manuscript should be uploaded as soon as possible.  If it is not possible for you to submit your revision in a reasonable amount of time, we may have to consider your paper as a new submission.

Once again, thank you for submitting your manuscript to the  International Journal of Computer Mathematics.  I look forward to receiving your revision.

Yours sincerely,
E.H. Twizell,
Professor Emeritus, Brunel University, U.K.
and
Editor-in-Chief,
International Journal of Computer Mathematics.
ijcm@tandf.co.uk


Referees' Comments to Author:

Referee: 1
Comments to the Author
The authors present a method to embed a complete binary tree inside a rectilinear simple n-gon. For aesthetic reasons, they aim for a relatively balanced distribution of the nodes over the polygon, and describe an algorithm to embed the tree in time O(nm^{\log 3}), where m is the size of the tree. Their technique is to iteratively dividing the polygon into two polygons with same area, und placing the tree nodes at the cuts. They prove that only a constant number of bends per edges is produced in total.

Techniques and proofs of the paper are quite elementary, but I believe it is mainly the merit of the authors that the paper is very well understandable in its technical part. I am confident that their proofs and algorithms are mostly correct, modulo the remarks listed below. Their illustrations also helped me in the intuitive understanding of their notation.

The topic of the paper seems to be relatively rarely studied, especially in the recent years. All citations that are not self-references are more than 10 years old. The authors should maybe search for more recent work related to their results. Additionally, by scanning through their references, it appears to me that their new approach differs from all of them in an important point: the authors do not assume that the nodes of the tree lie on a fixed integer grid.

Although the topic seems not to be "hot" in current research, I still believe that the problem is motivated sufficiently by its relation to user interfaces and VLSI design. Therefore, I think that it can be considered for publication, when the following points are taken into account.

- page 1, line 35: "There are also some algorithms...[8]" you should cite more than one reference here, if you say "some"

- page 2, line 17-20: I can imagine that this is hard, but try to be a bit more (but not too) specific when describing your drawing algorithm here. From that paragraph, one can not see the idea of the drawing algorithm when reading the first time.

- page 2, line 28: A more general remark about your bisecting algorithm. It appears to me that this is a new algorithm of yours for this problem, but it is not the first solution to this problem. It would be worth to give some background about related approaches for this problem as well. Also, as far as I understand, you are the first that tackle the drawing problem with the bisection technique, is this right? You should clarify this.

- page 2, line 35: The rectangulation extends the horizontal edges to the left and right, until it reaches the polygon's boundary again, right? Otherwise, I don't see why only r+1 rectangles are created.

- page 4, line 34: "In case 2, ..., it is not possible that..." I think that this is possible, but it does not spoil your argument. A horizontal skeleton segment might be on the same y-level as a horizontal polygon segment, but only if there is "something" in-between these segments. I think it will be similar to case 3.

- page 4, line 52: "is defined" -> "are defined"

- page 6, line 49: "The nodes" -> "the nodes"

- page 6, line 52: "be placed" -> "is placed"

- page 6, line 59: "...to guarantee planarity of drawings" As far as I understand, if start(ch)=start(ch_1), then two tree nodes would be placed at the same point, right? This explanation is more concrete.

- page 7, line 57: "the the" -> "the"

- page 8, line 12: "Select a rectangle R..." You have to name the other properties here, namely that you forbid to choose a rectangle such that the start equals the parent's start, and such that you have a constant number of bends from the parent's start to the start(ch_1)

- page 8, line 14: "5. If T is null return chain ch". If T is null, you don't have children, so this step should be the first one of the whole algorithm

- page 8, line 54: Your running time of O(nm^lg3) is correct, but I had to think about it. I know that this technique is pretty standard in algorithmics, maybe you can just cite some textbook where it is explained how such recurrence equations are solved.

- page 9, line 16-21: The case of general binary trees is certainly worth to be discussed in more detail. What running time can you prove here (I guess it must be at least quadratic in m)? Also for unbalanced trees, you might have to consider not the cut that divides into two equal parts, but a cut that divides by a ration a:b, where a and b is the number of nodes in the subtree, to assure a uniform distribution. Have you considered these ideas? Also, you might be able to get rid of the restriction to binary trees easily.

- page 9, line 24: About the drawing examples. Indeed, the pictures look very nice, but you do not answer the question, how the choice of your starting rectangle in step 3 of Alg 3.1 affects the "beauty" of the picture. My guess is that if you decrease the number of bends per edge, the picture will not be as nice anymore, at least if you have a rather complicated polygon. It would be interesting to see the result of your algorithm for such a polygon with at most 1,2,3,... bends per edge. At least, I think that this point should be discussed.

Referee: 2
Comments to the Author
In this paper, the authors provide a new algorithm to draw complete binary trees inside rectiliniar polygons.
There are several issues the authors would need to resolve, as follows:
1. It is unclear whether their drawings are on a grid. If they are not grid drawings, the authors would need to explain in the paper what is the restriction which makes their algorithm not feasible for grid drawings. If they are grid drawings, then some of the figures would need to be improved for clarity (for instance, figure 1b, there are two bends which are too close to be considered on grid points, taking in consideration the rest of the drawing).
2. There is some terminology which needs to be defined, for clarity. For instance, on page 2, define "reflex vertices" (line 36) and "hole" (line 44). Also, on the same page, the authors seem to use the same term "line segment" to refer to both a polygon edge and a chain edge. Maybe use different terms to clarity.
3. There is a paragraph on page 9 discussing the potential of drawing other types of binary trees. The authors need to elaborate on it or remove it.
4. Show an example for the entire algorithm. Have figures for each step showing the progress of the algorithm.

Minor corrections:
- page 2, line 37: change "follow" to "follows"
- page 3, line 31: change "algorithms" to "algorithm"
- page 3, line 35: change "denotes" to "denote"
- page 4, line 48: change "denotes" to "denote"
- page 4, line 52: change "is" to "are"
- page 4, line 53: change "details" to "detail"
- page 5, line 21: change "third" to "last" and "parts" to "part"
- page 6, line 39: change "follow" to "follows"
- page 6, line 49: change "The" to "the"
- page 7, line 57: remove one of the "the the"
- page 8, line 53: change "denotes" to "denote"

SUBJECT EDITOR'S COMMENT:

Please update the bibliography.